---
title: "Downloading OSM Data"
author: "Hany Nagaty"
editor: visual
---

## Intro

In the linked document, I used the [osmdata](https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html) package to download `selected` OSM features using the Overpass API.

In another document, I used the [osmextract](https://cran.r-project.org/web/packages/osmextract/vignettes/osmextract.html) package to download huge `bulks` of data. The [readme](https://github.com/ropensci/osmextract) at the GitHub repo gives a good introduction about using the tool. In addition to this [vignette](https://cran.r-project.org/web/packages/osmextract/vignettes/osmextract.html).

In here, I also use the `osmextract` method to download the bulk data of Egypt. I now understand the general structure of the tagging system used at Open Street Maps, after reading this [post](https://wiki.openstreetmap.org/wiki/Tags).

The aim is to extract all the tags and process them, to be able to extract useful information from them.

### A Blog Post

If I would like to write a blog post about OSM extraction, then I should talk about

-   Overpass API vs Extraction
-   Tags
-   Elements of OSM. The 3 main elements; nodes, ways & relations.
-   Useful features

### Initialisation

```{r}
#| label: loadLibs
#| echo: false
#| warning: false
#| message: false
library(sf)
library(units)
library(tidyverse)
library(kableExtra)
library(tmap)
library(osmextract)
library(skimr)
library(pins)
#library(tidytext)
```

```{r}
#| label: globalsInit
#| echo: false

use_pin <- FALSE
message("Using pins is set to ", use_pin)

if (.Platform$OS.type == "Windows") {
    conf_file <- "D:/DataAnalytics/~Configs/globalConf.yaml"
  } else if (.Platform$OS.type == "unix") {
    conf_file <- "~/MEGA/myDataScience/conf/globalConf.yaml"
    dataset_file <- "~/MEGA/myDataScience/conf/datasets.yaml"
  } else {
  message("Unsupported OS:", .Platform$OS.type, ". Config file not loaded.")
}

global_conf <- yaml::read_yaml(conf_file)
datasets <- yaml::read_yaml(dataset_file)
egypt_box <- global_conf$geoBorders$egypt
cairo_box <- global_conf$geoBorders$cairo
osmConfFile <- global_conf$osm$osmConf

osmExFolder <- datasets$datasets$osmExtracts$folder
message("OSM Extracts will be saved/read from: ", osmExFolder)

# tmap options
tmap_mode("view")
tmap_options(check.and.fix = TRUE)

# pins folder
if (.Platform$OS.type == "Windows") {
  board <- board_folder(global_conf$pins$boardW)
  } else {
  board <- board_folder(global_conf$pins$boardL)
}
pin_name <- global_conf$pins$osmE
message('Using pin "', pin_name, '" at board "', board$path, '".')

# OSM Options
osm_zone <- "Egypt"
```

## Download OSM Extracts

Downloading OSM extracts involves the below steps (high level)

1.  Checking the OSM providers

    -   Severel providers are able to provide bulk OSM downloads.

2.  Specifying a zone

    -   The region of interest. This could be a country.

3.  Downloading `.pbf` file

    The `.pbf` format is a the native format of OSM. It is highly optimised binary format used by OSM providers to store and share OSM extracts. This steps downloads a single file that is pre-packaged for the zone of interest.

4.  Converting `.pbf` to `.gpkg`

    The GeoPackage (`.gpkg`) is an open, standards-based, platform-independent, portable, self-describing, compact format for transferring geo-spatial information. See [here](#0).

    -   In here I select the features that I want convert and
    -   This also converts it to R native format; the sf object class

### OSM Providers

```{r}
oe_providers()
```

The default provider is [Geofabrik](https://www.geofabrik.de/), and is described as "the best known bulk OSM data provider".

### Specify a Zone

```{r}
osm_match <- oe_match(osm_zone)
osm_match
```

### Download `.pbf` File

I download a `.pbf` file (`.pbf` is a highly optimised binary format used by OSM providers) and save it to `r osmExFolder`.

```{r}
osm_file <- oe_download(
  file_url = osm_match$url,
  file_basename = str_glue(
    "{osm_zone}_",
    {str_remove_all(lubridate::today(), "-")},
    ".pbf"),
  download_directory = osmExFolder
)
message("OSM is saved in: ", osm_file)

st_layers(osm_file) #, do_count = TRUE)
```

### Convert to `gpkg` format

The [GeoPackage](http://www.geopackage.org/) (`.gpkg`) is an open, standards-based, platform-independent, portable, self-describing and compact format for transferring geo-spatial information.

The below converts the `pbf` to `gpkg` and saves the result in the same path as input. The return value is the filename.

I check all the layers in the pbf and convert all of them.

I use a custom .ini file. Mainly to add everything in the extra_tags, and remove them as separate columns.

***Below code takes considerable amount of time.***

```{r}
layers <- chuck(st_layers(osm_file), 1)
system.time({
  osm_gpkg <- map(layers, \(x) oe_vectortranslate(osm_file, layer = x, osmconf_ini = osmConfFile))
})
```

List the layers in the OSM file

```{r}
osm_gpkg <- osm_gpkg[[1]]
st_layers(osm_gpkg)
```

### Lines

```{r}
osm_lines <- st_read(osm_gpkg, layer = 'lines')
```

Points

```{r}
osm_points <- st_read(osm_gpkg, layer = 'points')
```

```{r}

exclude_list <- c(
  "name",
  "addr",
  "description",
  "ref",
  "destination",
  "NULL"
)


ot <- unique(c(osm_lines$other_tags, osm_points$other_tags))
ot <- unique(osm_lines$other_tags)
otS <- ot[1:2e3]

# 147101, 25746, 2032887

ot1 <- ot[25746]
ot1


ot1s <- str_split(ot1, '",') |> 
  chuck(1)
ot1s

extract_tags <- function(tag, exclude_list = NULL, as_list = FALSE) {
  splits <- str_split(tag, '",') |> 
    chuck(1)
  keys <- str_extract_all(splits, ".*(?==>)") |> 
    map(1) |> 
    str_remove_all('"')
  values <- str_extract_all(splits, "(?<==>).*") |> 
    str_remove_all('"') |> 
    setNames(keys)
  if (!is.null(exclude_list)) {
    excluded <- map_dfc(exclude_list, ~ str_detect(keys, .x)) |>
      #bind_cols(.name_repair = "unique") |> 
      suppressMessages() |> 
      mutate(...0 = is.null(keys)) |> 
      mutate(any = if_any(starts_with("..."))) |> 
      chuck("any")
    values <- values[!excluded]
  }
  if (as_list) {
    # values <- as.list(values)
    values <- list(values)
  }
  return(values)
}


osmL <- osm_lines |> 
  slice_head(n = 2e2)

osmD <- osmL |>  
  rowwise() |> 
  mutate(Tags = extract_tags(
    other_tags, 
    exclude_list = exclude_list,
    as_list = TRUE))

osmW <- osmD |> 
  unnest_wider(Tags)

osmL <- osmD |> 
  unnest_longer(Tags)


otD2 <- otD


es <- extract_tags(ot1, exclude_list = exclude_list)
es





map(exclude_list, ~ str_detect(names(es), .x)) |> 

es[str_detect(names(es), exclude_list[2], negate = TRUE)]


ot1s_key <- str_extract_all(ot1s, ".*(?==>)") |> 
  map(1) |> 
  str_remove_all('"')
ot1s_key

ot1s_value <- str_extract_all(ot1s, "(?<==>).*") |> 
  str_remove_all('"')
names(ot1s_value) <- ot1s_key
ot1s_value

list(ot1s_value)

ot1s_list <- list(ot1s_value)
ot1s_list

ot1a <- str_remove_all(ot1, '"')
```

------------------------------------------------------------------------

Download the data and pin it. Or alternatively, read it directly from the pin.

*The class of the downloaded object is `sf`*

```{r}
if (use_pin) {
  osm <- pin_read(board, pin_name)
  osm_lines <- osm$lines
} else {
  osm_lines <- oe_get("Egypt", stringsAsFactors = FALSE, quiet = FALSE) |> 
    mutate(across(all_of(c("highway", "waterway", "aerialway", "barrier", "man_made")), as.factor))
}
```

### Lines

```{r}
ot <- unique(osm_lines$other_tags)
ot1 <- ot[3]

ot1a <- str_remove_all(ot1, '"')
ot1b <- str_split(ot1, '\",')
```

```{r}
osm_lines |> st_drop_geometry() |> skim()
```

#### Highway

Items of interest here are `motorway`, `trunk` and `primary`.

```{r}
osm_lines |> 
  st_drop_geometry() |> 
  filter(!is.na(highway)) |> 
  count(highway, sort = TRUE)
```

#### Waterway

Items of interest here are `river` and `canal`. The former has the River Nile and the later has the Suez Canal.

```{r}
osm_lines |> 
  st_drop_geometry() |> 
  filter(!is.na(waterway)) |> 
  count(waterway, sort = TRUE)
```

### Multi Linestring

```{r}
if (use_pin) {
  osm_mlines <- osm$linestrings
} else {
  osm_mlines = oe_get("Egypt", stringsAsFactors = FALSE, quiet = FALSE, layer = "multilinestrings")
}
```

```{r}
osm_mlines |> st_drop_geometry() |> count(type)
```

All are of type `route`. Nothing of particular interest is in here.

### Polygons

```{r}
if (use_pin) {
  osm_pols <- osm$polygons
} else {
  osm_pols = oe_get("Egypt", stringsAsFactors = FALSE, quiet = FALSE, layer = "multipolygons") |> 
    mutate(across(!any_of(c("osm_id", "osm_way_id", "name", "other_tag", "geometry")), as.factor))
}
```

```{r}
osm_pols |> 
  st_drop_geometry() |> 
  skim()
```

The majority of the polygons are for buildings. But, most of the time, building is an attribute for `amenity`

#### Buildings

```{r}
osm_pols |> 
  st_drop_geometry() |> 
  filter(!is.na(building)) |> 
  filter(is.na(amenity)) |>   # View()
  count(building, sort = TRUE) |> 
  kbl()
```

*The buildings are not of interest for me*

#### Boundary

##### Administrative

```{r}
osm_pols |> 
  st_drop_geometry() |> 
  filter(!is.na(boundary)) |> 
  count(boundary, sort = TRUE) |> 
  kbl()
```

```{r}
osm_pols |> 
  st_drop_geometry() |> 
  filter(boundary == "administrative") |> 
  count(place)
```

Admin level 4 is the governorates. Admin level 2 is Egypt.

###### Governorates

```{r}
osm_pols |> 
  st_drop_geometry() |> 
  filter(!is.na(admin_level)) |> 
  count(admin_level, sort = TRUE) |> 
  kbl()
osm_pols |> 
  filter(boundary == "administrative") |> 
  filter(admin_level == 4) |> # governorates
  filter(type == "boundary") |> # Cairo has 2 overlapping polygons. The other has type = multipolygon
  tm_shape() +
  tm_polygons(alpha = 0.3, 
              fill = "green", col = "blue", 
              id = "name") +
  tm_text("name")
```

*There is a clear shift between those borders and those of the underlying map.*

###### Neighbourhoods

```{r}
osm_pols |> 
  filter(boundary == "administrative") |> 
  filter(place == "neighbourhood") |> 
  tm_shape() +
  tm_polygons(alpha = 0.3, 
              fill = "green", col = "blue", 
              id = "name")
```

##### Protected Areas

```{r}
osm_pols |> 
  filter(boundary == "protected_area") |> 
  tm_shape() +
  tm_polygons(alpha = 0.3, 
              fill = "green", col = "blue", 
              id = "name")
```

### Points

```{r}
if (use_pin) {
  osm_points <- osm$points 
} else {
  osm_points <- oe_get("Egypt", stringsAsFactors = FALSE, quiet = FALSE, layer = "points") |> 
      mutate(across(all_of(c("barrier", "highway", "ref", "address",
                         "is_in", "place", "man_made")), as.factor))
}
```

This is a huge layer, it has `r nrow(osm_points)` points.

```{r}
osm_points |> 
  st_drop_geometry() |> 
  skim()
```

Eye-balling the data doesn't reveal any features of interest.

#### Place

```{r}
osm_points |> 
  select(-is_in, -address) |> 
  st_drop_geometry() |> 
  filter(!is.na(place)) |> 
  count(place, sort = TRUE)
```

##### Cities, Towns & Villages

```{r}
osm_points |> 
  select(-is_in, -address) |> 
  filter(place %in% c("city", "town", "village")) |> 
  mutate(place = fct_drop(place)) |> 
  tm_shape() +
  tm_dots(col = "place", id = "name")
```

### Save to Pin

```{r}
if (!use_pin) {
  pin_write(board, 
            list(lines = osm_lines,
                 linestrings = osm_mlines,
                 polygons = osm_pols,
                 points = osm_points),
            name = pin_name,
            type = "rds")
  }
```

### Conclusion

Using `osmextract` for downloading OSM data is not as flexible as using the Overpass API (with `osmdata` for example). Using Overpass API, I have full control and can download the features as described in the [OSM Map Catalogue](https://wiki.openstreetmap.org/wiki/Map_features).

Using `osmextract` might be useful for high level exploration of the data. For downloading data, I prefer to use the Overpass API.

I found some interesting features here. Those are:

-   **Highway**: motorway, trunk & primary
-   **Waterway**: river & canal
-   **Boundaries**: governorates, neighbourhoods and protectorates.
-   **Places**: cities, towns & villages (point features)

It is worth mentioning that the amenities and other landmarks of interest are mostly present in the polygon layer rather than the points layer.
