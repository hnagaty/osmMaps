---
title: "OSM API"
format: 
  html:
    theme: lux
editor: visual
---

```{r}
#| echo: false
#| warning: false
#| message: false
library(sf)
library(units)
library(tidyverse)
library(kableExtra)
library(tmap)
library(osmdata)
library(tmap)
library(pins)
```

```{r}
#| label: globalsInit
#| echo: false
#| message: false

# if true, then don't download data from OSM.
# else, download the data from osm and then pin it.
use_pin <- FALSE

if (.Platform$OS.type == "Windows") {
  conf_file <- "D:/DataAnalytics/~Configs/globalConf.yaml"
  } else if (.Platform$OS.type == "unix") {
  conf_file <- "~/MEGA/myDataScience/conf/globalConf.yaml"
  } else {
  stop("Unsupported OS:", .Platform$OS.type, ". Config file not loaded. Aborting execution.")
}

global_conf <- yaml::read_yaml(conf_file)
egypt_box <- global_conf$geoBorders$egypt
cairo_box <- global_conf$geoBorders$cairo

tmap_mode("view")
# tmap_options(check.and.fix = TRUE)

interest_list <- c()
```

*I got Egypt bounding box boundaries from [here](https://gist.github.com/graydon/11198540)*.

```{r}
#| label: initPins
if (.Platform$OS.type == "Windows") {
  board <- board_folder(global_conf$pins$boardW)
  } else {
  board <- board_folder(global_conf$pins$boardL)
}
pin_name <- global_conf$pins$osmA
message('Using this board:')
message(board)
```

```{r}
#| label: userFunctions
#' Summarise an osmdata object
#' Data downloaded by osmdata is a list of sf object. This function
#' inspects this object, and lists the sf features within this object. 
#' Each feature also has the number of rows and the number of columns.
#'
#' @param osm osmdata object. An object downloaded via the omsdata library.
#'
#' @return a dataframe
summarise_osm <- function(osm) {
  interests <- grep("osm_", names(osm), value = TRUE)
  rows <- c()
  cols <- c()
  layers <- c()
  for (interest in interests) {
    rows <- c(rows, nrow(osm[[interest]]))
    cols <- c(cols, ncol(osm[[interest]]))
    if (!is.null(osm[[interest]])) {
      layers <- c(layers, str_to_title(str_extract(interest, "(?<=osm_).*")))
    }
  }
  return(tibble(
    Layer = layers,
    Rows = rows,
    Cols = cols))
}



#' List NA columns
#' Lists columns that has their NA count greater than or equal to
#' a given threshold.
#'
#' @param df A data.frame
#' @param thr numeric, between 0 and 1. The NA threshold to use.
#' 1 will return columns that has all NA. 0 will return all columns.
#'
#' @return named vector. The value is the NA count ratio in each column, 
#' the name is the name of the column.
na_cols <- function(df, thr = 0.5) {
  na_ratio <- colSums(is.na(df))/nrow(df)
  return(na_ratio[na_ratio >= thr])
}



make_osm_list <- function(osm_objects) {
  res_list <- list()
  for (obj in osm_objects) {
    obj_name <- str_to_title(obj)
    obj <- paste0("osm_", obj)
    if (exists(obj)) {
      res_list[[obj_name]] <- get(obj)
      message(paste("Adding", obj, "to the save list."))
    } else {
      message(paste(obj, "doesn't exist and will not be saved."))
    }
  }
  return(res_list)
}



#' Downloads an OSM Feature
#' Download an OSM feature, using the provided key & value
#' @param bbox a matrix, vector or object returned by osmdata::getbb()
#' @param key character. The key to use for the Overpass query.
#' @param value character. The query value. Default is NULL. If Null,
#' then query all available values.
#' @return returns the downloaded data invisibly.
#' The function is called mainly for its side effect. It assigns
#' the downloaded layer to a variable named osm_<key>
download_osm <- function(bbox, key, value = NULL) {
  message(paste("Now downloading osm layer: ", key, "..."))
  if (is_null(value)) {
    res <- opq(bbox) |>
      add_osm_feature(key = key) |> 
      osmdata_sf()
  } else {
    res <- opq(bbox) |>
      add_osm_feature(key = key, value = value) |> 
      osmdata_sf()
  }
  assign(paste0("osm_", key), res, envir = .GlobalEnv) #parent.frame())
}



#' Clean an OSM Data Object
#' Cleans on osmdata object (that generated by osmdata library)
#' It simply 
#' a. removes columns that have many NA (> thr)
#' b. combines all sub-layers into a single data frame
#'
#' @param osm_data on osm data object
#' @param drop_geom boolean. If TRUE, the drop the st geometry
#' @param drop_id boolean. If TRUE, the drop the osm_id column
#' @param double_clean boolean. If TRUE, then clean the NA columns
#' again after merging the sub-layers. Note that the drop threshold
#' here is hard coded at 0.9
#'
#' @return A dataframe or an sf object (according to drop_geom)
clean_osmdata <- function(
    osm_data,
    drop_geom = FALSE,
    drop_id = FALSE,
    double_clean = FALSE,
    ...) {
  layer_name <- osm_data$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
  res <- map_dfr(
    osm_data,
    clean_osm_layer,
    .id = "layer",
    layer = layerName,
    ...)
  if (drop_id) {
    res <- select(res, -osm_id)
  }
  if (double_clean) {
    res <- clean_osm_layer(
      res, 
      layer_name = layer_name, 
      thr = 0.9,
      ...)
  }
  if (drop_geom) {
    res <- st_drop_geometry(res)
  }
  return(res)
}



#' Clean an SF object
#' Cleans an sf object. It simply removes the columns that has hight
#' count of NAs, larger than thr.
#' It will also remove all columns named name.xx and description.xx,
#' and keep only the .ar and .en columns.
#'
#' @param osm_layer sf object
#' @param layer_name the layer name. The layer_name is excluded from column
#' deletion.
#' @param thr between 0 and 1
#' @param keep_na_rows logical. If FALSE, then drop rows that has no name
#' and layer. I don't always want to do this, for example in natural
#' features that have no name, e.g. coastline or borders.
#' Note also that dropping rows will impact the column filter for 
#' the same threshold value.
#' @param keep_cols a vector of column name I want to keep anyway.
#' @return sf object
clean_osm_layer <- function(
    osm_layer, 
    layer_name,
    thr = 0.9,
    keep_na_rows = TRUE,
    keep_cols = NULL) {
  if (class(osm_layer)[1] == "sf") {
    if (missing(layer_name)) {
        warning("Layer Name parameter is not provided, hence it may be dropped.")
    }
    res <- osm_layer
    if (!keep_na_rows) {
        res <- res |> 
            filter(!is.na(name) | !is.na(.data[[layer_name]]))
    }
    res <- res |> 
        select(
            -all_of(names(na_cols(res, thr = thr))),
            -contains("name."), # remove names in languages other than en or ar
            any_of(c("name", "name.ar", "alt_name.ar", "name.en", "alt_name.en")),
            -contains("description."), 
            any_of(c("description", "description.ar", "description.en")),
            any_of(keep_cols),
            {{ layer_name }})
    return(res)
  }
}
```

```{r}
#| label: proxyFunctions
#| echo: false
init_proxy <- function() {
  proxy <- global_conf$httpProxy
  proxy$password <- rstudioapi::askForPassword(prompt = "Proxy Password")
  proxy_str <- paste0(
    proxy$username, ":",
    proxy$password, "@",
    proxy$server, ":",
    proxy$port
  )
  Sys.setenv(http_proxy = proxy_str)
  Sys.setenv(https_proxy = proxy_str)
}

deinit_proxy <- function() {
  Sys.setenv(http_proxy = "")
  Sys.setenv(https_proxy = "")
}

```

# Overpass API

I try to download Egypt OSM maps via the overpass API. The [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API) is a read only API provided by OSM to download selected data. It has a playground [here](https://overpass-turbo.eu/).

This [link](https://wiki.openstreetmap.org/wiki/Map_features) is useful for describing the map features and tags.

I use the R package [`osmdata`](https://docs.ropensci.org/osmdata/) for this. The package is designed to allow access to small-to-medium-sized OSM datasets. See [`osmextract`](https://github.com/ropensci/osmextract) for an approach for reading-in bulk OSM data extracts.

```{r}

if (.Platform$OS.type == "Windows") {
  init_proxy()
}

```

## Available features

List available features in the Overpass API

```{r}
available_features() |> 
  head() |> 
  kbl()
```

I have `r length(available_features())` features. Those are so many. Besides, using only the name is uninformative. Instead, I rely on the OSM [map features](https://wiki.openstreetmap.org/wiki/Map_features "OSM Map Catalogue") guide to identify the features of interest to me.

### Interesting Features

I find those features interesting and will download and explore them.

#### [Highway](https://wiki.openstreetmap.org/wiki/Highways)

This is used to describe roads and footpaths. The highways of interest are:

1.  **motorway**: A restricted access major divided highway, normally with 2 or more running lanes plus emergency hard shoulder. Equivalent to the Freeway, Autobahn, etc..
2.  **trunk**: The most important roads in a country's system that aren't motorways. (Need not necessarily be a divided highway).
3.  **primary**: The next most important roads in a country's system. (Often link larger towns.)

#### [Amenity](https://wiki.openstreetmap.org/wiki/Key:amenity)

Used to map facilities used by visitors and residents. For example: toilets, telephones, banks, pharmacies, cafes, parking and schools.

#### [Boundary](https://wiki.openstreetmap.org/wiki/Boundaries)

These are used to describe administrative and other boundaries. Interesting features are:

1.  [**administrative**](https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative "Tag:boundary=administrative"): An administrative boundary. Subdivisions of areas/territories/jurisdictions recognised by governments or other organisations for administrative purposes. These range from large groups of nation states right down to small administrative districts and suburbs, as indicated by the '[admin_level](https://wiki.openstreetmap.org/wiki/Key:admin_level "Key:admin level")=\*' combo tag.
2.  [**national_park**](https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dnational_park "Tag:boundary=national park"): Area of outstanding natural beauty, set aside for conservation and for recreation.
3.  [**protected_area**](https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dprotected_area "Tag:boundary=protected area"): Protected areas, such as for national parks, marine protection areas, heritage sites, wilderness, cultural assets and similar.

#### [Place](https://wiki.openstreetmap.org/wiki/Places)

This is used mainly to give details about settlements. This includes country, region, province, county, city, town, village and many others.

#### [Landuse](https://wiki.openstreetmap.org/wiki/Landuse)

This is used to describe the purpose for which an area of land is being used.

1.  [**commercial**](https://wiki.openstreetmap.org/wiki/Tag:landuse%3Dcommercial "Tag:landuse=commercial"): Predominantly commercial businesses and their offices. Commercial businesses which sell goods should be categorised as [landuse](https://wiki.openstreetmap.org/wiki/Key:landuse "Key:landuse")=[retail](https://wiki.openstreetmap.org/wiki/Tag:landuse%3Dretail "Tag:landuse=retail"). Commercial businesses have low amounts of public foot traffic.
2.  [**residential**](https://wiki.openstreetmap.org/wiki/Tag:landuse%3Dresidential "Tag:landuse=residential"): Land where people reside; predominantly residential detached (single houses, grouped dwellings), or attached (apartments, flats, units) dwellings. For "Mixed-Use" areas where more than half of the land is residential, tag as residential.
3.  [**farmland**](https://wiki.openstreetmap.org/wiki/Tag:landuse%3Dfarmland "Tag:landuse=farmland"): An area of farmland used for tillage (cereals, vegetables, oil plants, flowers).
4.  [**cemetery**](https://wiki.openstreetmap.org/wiki/Tag:landuse%3Dcemetery "Tag:landuse=cemetery"): Place for burials.

#### [Railway](https://wiki.openstreetmap.org/wiki/Railways)

1.  [**rail**](https://wiki.openstreetmap.org/wiki/Tag:railway%3Drail "Tag:railway=rail"): Full sized passenger or freight trains in the standard gauge for the country or state.
2.  [**subway**](https://wiki.openstreetmap.org/wiki/Tag:railway%3Dsubway "Tag:railway=subway"): A city passenger rail service running mostly grade separated. Often a significant portion of the line or its system/network is underground.
3.  [**monorail**](https://wiki.openstreetmap.org/wiki/Tag:railway%3Dmonorail "Tag:railway=monorail"): A railway with only a single rail.

#### [Shop](https://wiki.openstreetmap.org/wiki/Shop)

The shop tag is used as a place of business that has stocked goods for sale

#### [Tourism](https://wiki.openstreetmap.org/wiki/Tourism)

This is used to map places and things of specific interest to tourists. For example these may be places to see, places to stay and things and places providing support

1.  [**attraction**](https://wiki.openstreetmap.org/wiki/Tag%3Atourism%3Dattraction): An object of interest for a tourist, or a purpose-built tourist attraction.
2.  [**hotel**](https://wiki.openstreetmap.org/wiki/Tag%3Atourism%3Dhotel): An establishment that provides paid lodging.
3.  [theme_park](https://wiki.openstreetmap.org/wiki/Tag%3Atourism%3Dtheme_park): An amusement park where entertainment is provided by rides, games, concessions.
4.  [zoo](https://wiki.openstreetmap.org/wiki/Tag%3Atourism%3Dzoo): A zoological garden, where animals are confined for viewing by the public.

#### Natural

This is used to describe natural and physical land features. These also include features that have been modified by humans. Interesting features are:

1.  [**coastline**](https://wiki.openstreetmap.org/wiki/Tag%3Anatural%3Dcoastline): The mean high water (springs) line between the sea and land (with the water on the right side of the way).
2.  [**sand**](https://wiki.openstreetmap.org/wiki/Tag%3Anatural%3Dsand): An area covered by sand with no or very little vegetation.
3.  [**dune**](https://wiki.openstreetmap.org/wiki/Tag%3Anatural%3Ddune)**:** A hill of sand formed by wind, covered with no or very little vegetation

#### [Waterway](https://wiki.openstreetmap.org/wiki/Waterways)

This is used to described different types of waterways. When mapping the way of a river, stream, drain, canal, etc. These need to be aligned in the direction of the water flow.

1.  [**river**](https://wiki.openstreetmap.org/wiki/Tag%3Awaterway%3Driver): The linear flow of a river, in flow direction.
2.  [**stream**](https://wiki.openstreetmap.org/wiki/Tag%3Awaterway%3Dstream): A naturally-forming waterway that is too narrow to be classed as a river.
3.  [**canal**](https://wiki.openstreetmap.org/wiki/Tag%3Awaterway%3Dcanal): An artificial 'open flow' waterway used to carry useful water for transportation, waterpower, or irrigation.
4.  [**drain**](https://wiki.openstreetmap.org/wiki/Tag%3Awaterway%3Ddrain): An artificial free flow waterway used for carrying superfluous water, usually lined with concrete.

### Others to be checked later

sports, leisure, building, metro stations and railway stations.

## Download the Data

#### Setting the URL

This [wiki](https://wiki.openstreetmap.org/wiki/Overpass_API#Public_Overpass_API_instances) lists the public overpass API instances. The used URL is `r get_overpass_url()`. This is the default endpoint. I prefer to use another one, which hopeful won't time-out as much as the default one.

```{r}
set_overpass_url("https://maps.mail.ru/osm/tools/overpass/api/interpreter")
```

```{r}
interest <- c("highway",
              "amenity",
              "boundary",
              "place",
              "landuse",
              "railway",
              "shop",
              "tourism",
              "natural",
              "waterway")
```

#### Downloading

This might use some time

```{r}
if (!use_pin) {
  walk(interest, possibly(~download_osm(egypt_box, .x), NULL, quiet = F))
}
```

The `highway` download fails when not specifying a query value. I download it after I specify a query value for the most important highway types.

```{r}
if (!use_pin) {
  download_osm(egypt_box, "highway", c("motorway", "trunk", "primary"))
}
```

```{r}
#| label: alternateDownloads
#| eval: false
#| echo: false
t1 <- opq(egypt_box) |>
  add_osm_feature(key = "boundary") |> #, value = "administrative") |> 
  osmdata_sf()
t2 <- opq(egypt_box) |>
 add_osm_features(
   features = c('"natural"="coastline"',
                '"natural"="water"')) |> 
  osmdata_sf()
```

#### Pinning

```{r}
#label: savePins

if (!use_pin) {
  message("Saving pin ...")
  pin_write(board, make_osm_list(interest), name = pin_name, 
            type = "rds",
            versioned = TRUE,
            title = "OSM Layers of Interest",
            description = "A full download.")
  message("\nPin saved ...")
} else {
  message("Data is read from the pin, so no need to pin it.")
}
```

To save memory, I delete all the downloaded features and then load them one by one.

```{r}
rm(list = paste0("osm_", interest))
gc()
```

## Exploring Features

I now start to explore each feature separately.

```{r}
if (use_pin) {
  osm_data <- pin_read(board, pin_name)
}
```

### Motorways

```{r}
#| label: readOSM
#| eval: false
t1 <- osm_data |> 
  chuck("Highway")
roads <- t1 |> 
  chuck("osm_lines") |> 
  st_transform(crs = 32636)
gc()
```

```{r}
#| eval: false
roads |> 
  ggplot() +
  geom_sf(aes(color = highway, size = highway)) +
  scale_colour_manual(values = c("red", "orange", "brown", "blue")) +
  scale_size_manual(values = c(1.5, 0.5, 0.5, 0.8)) +
  ggtitle("Egypt Roads")
```

```{r}
#| eval: false
roads |> 
  filter(highway == "motorway") |> 
  mutate(Length = st_length(geometry)/2) |> 
  st_drop_geometry() |> 
  group_by(name.en) |> 
  summarize(Length = set_units(sum(Length), "km")) |> 
  arrange(desc(Length)) |> 
  rename("Road Name" = name.en, "Length in Km" = Length) |> 
  kbl(digits = 2) |> 
  kable_styling(bootstrap_options = c("hover")) |> 
  row_spec(0, bold = T, font_size = 16, align = "center") |> 
  column_spec(1, bold = T, border_right = T, width = "10cm") 
```

##### The Ring Road

Plot a single road name The Ring Road is sometimes motorway and also trunk. They overlap, are duplicates.

```{r}
#| eval: false
roads |> 
  mutate(Interest = if_else(name.en == "The Ring Road", "Yes", "No", missing = "No")) |> 
  ggplot() +
  geom_sf(aes(color = Interest, size = Interest)) +
  scale_colour_manual(values = c("Yes" = "red", "No" = "orange")) +
  scale_size_manual(values =  c("Yes" = 1.4, "No" = 0.2)) +
  ggtitle("The Ring Road") +
  coord_sf(crs = 4326, xlim = c(31, 31.5), ylim = c(29.9, 30.2))
```

To identify Cairo ring road, I filter by `highway = "motorway"` and `name.en = "The Ring Road"`.

Plot an interactive map

```{r}
#| eval: false
tmap_mode("view")
tm_shape(roads) +
  tm_lines(lwd = 2, col = "red")
```

Roads should be snapped to themselves, to remove the double-way lines and keep only a single line.

```{r}
#| eval: false
ring <- roads |> 
  filter(name.en == "The Ring Road" & highway == "motorway")
st_length(st_union(ring))
```

```{r}
#| eval: false
tmap_mode("view")
tm_shape(ring) +
  tm_lines(lwd = 2, col = "red")
```

```{r}
#| eval: false
ring2 <- ring |> 
  st_union() |> 
  st_snap(st_union(ring), tolerance = 30) |> 
  st_simplify()

st_length(st_union(ring2))

tm_shape(ring2) +
  tm_lines(lwd = 2, col = "red")
```

*I can't remove the double-ways with snap.*

#### Roads of Interest

Only get the roads of interest, and only the features of interest. I'm interested in **motorway** & **trunk**

```{r}
interest_list <- c(interest_list, "interest_roads") |> 
  unique()
interest_roads <- roads |> 
  select(name, name.en, lanes, highway) |> 
  filter(!is.na(name)) |> 
  filter(highway %in% c("motorway", "trunk")) |> 
  filter(grepl("Road", name.en, ignore.case = TRUE)) |> 
  filter(st_intersects(geometry, egypt, sparse = F)) |> 
  filter(!grepl("Beren", name)) |> 
  group_by(name) |> 
  summarise(
    geometry = st_union(geometry),
    name.en = max(name.en),
    lanes = max(lanes)) |> 
  group_by(name.en) |> 
  summarise(
    geometry = st_union(geometry),
    name = max(name),
    lanes = max(lanes)) |> 
  relocate(name, name.en) |> 
  rename(c(Name = name,
           NameEN = name.en,
           Lanes = lanes)) |> 
  arrange(Name)
```

```{r}
interest_roads |> 
  tm_shape() +
  tm_lines("Name", id = "Name", legend.col.show = F)
```

### Natural

#### Coastline

Check the non-missing columns

```{r}
t1 <- osm_data |> 
  chuck("Natural")
summarise_osm(t1) |> 
  kbl() |> 
  kable_classic()
```

```{r}
layerName <- t1$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
t0 <- clean_osmdata(t1, drop_geom = FALSE, drop_id = TRUE, double_clean = TRUE)
t0 |> 
  st_drop_geometry() |> 
  count(.data[[layerName]], layer) |> 
  add_count(.data[[layerName]], wt = n, name = "TotalCount") |> 
  pivot_wider(
    names_from = layer,
    values_from = n) |> 
  arrange(desc(TotalCount)) |> 
  rename_with(~str_replace(.x, "osm_", ""), .cols = starts_with("osm_")) |> 
  rename_with(str_to_title) |> 
  kbl() |> 
  kable_classic()
```

```{r}
interest_list <- c(interest_list, "interest_coastline") |> 
  unique()
interest_coastline <- t0 |> 
  filter(natural == "coastline") |> 
  st_transform(global_conf$crs$utm36) |> 
  filter(st_intersects(geometry, egypt, sparse = F)) |> 
  summarise(geometry = st_union(geometry)) |> 
  mutate(Name = "Coastline", NameEN = "Coastline")
```

### Boundary

This lists some common cities and countries. It has the **population**.

```{r}
t1 <- osm_data |> 
  chuck("Boundary")
summarise_osm(t1) |> 
  kbl() |> 
  kable_classic()
```

```{r}
#| label: osmFeatureSummary
layerName <- t1$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
keep_cols <- c()
t0 <- t1 |> 
  clean_osmdata(
    drop_geom = FALSE,
    drop_id = TRUE,
    double_clean = TRUE,
    keep_na_rows = FALSE,
    keep_cols = keep_cols) |> 
  st_transform(crs = global_conf$crs$utm36)
t0 |> 
  st_drop_geometry() |> 
  count(.data[[layerName]], layer) |> 
  add_count(.data[[layerName]], wt = n, name = "TotalCount") |> 
  pivot_wider(
    names_from = layer,
    values_from = n) |> 
  arrange(desc(TotalCount)) |> 
  rename_with(~str_replace(.x, "osm_", ""), .cols = starts_with("osm_")) |> 
  rename_with(str_to_title) |> 
  kbl() |> 
  kable_classic()
```

```{r}
tmap_options(check.and.fix = TRUE)
t0 |> 
  filter(layer == "osm_multipolygons" | layer == "osm_polygons") |> 
  #filter(place == "country") |> 
  filter(boundary == "administrative") |> 
  # filter(admin_level == "2") |>
  tm_shape() +
  tm_polygons("place", alpha = 0.3, id = "admin_level")
```

#### Egypt

```{r}
egypt <- t0 |> 
  filter(layer == "osm_multipolygons" | layer == "osm_polygons") |> 
  filter(name.en == "Egypt") |> 
  select(name, name.en) |> 
  mutate(geometry = st_union(geometry))
```

```{r}
egypt |> 
  tm_shape() +
  tm_polygons(alpha = 0.2)
```

### Landuse

```{r}
t1 <- osm_data |> 
  chuck("Landuse")
summarise_osm(t1) |> 
  kbl() |> 
  kable_classic()
```

```{r}
layerName <- t1$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
t0 <- clean_osmdata(t1, drop_geom = FALSE, drop_id = TRUE, double_clean = TRUE)
t0 |> 
  st_drop_geometry() |> 
  count(.data[[layerName]], layer) |> 
  add_count(.data[[layerName]], wt = n, name = "TotalCount") |> 
  pivot_wider(
    names_from = layer,
    values_from = n) |> 
  arrange(desc(TotalCount)) |> 
  rename_with(~str_replace(.x, "osm_", ""), .cols = starts_with("osm_")) |> 
  rename_with(str_to_title) |> 
  kbl() |> 
  kable_classic()
```

The polygons & multi-polygons seem interesting.

```{r}
t0 |> 
  st_drop_geometry() |> 
  filter(layer == "osm_polygons") |> 
  filter(!is.na(name.ar)) |> 
  select(name.ar, landuse) |> 
  slice_sample(n = 35) |> 
  kbl() |> 
  kable_classic()
```

```{r}
t0 |> 
  filter(layer == "osm_polygons") |> 
  slice_sample(n = 1e4) |> 
  tm_shape() +
  tm_polygons("landuse", id = "name.ar")
```

I don't find interesting objects at this feature.

### Place

This should contain some cities, populations, ... etc

```{r}
t1 <- osm_data |> 
  chuck("Place")
summarise_osm(t1) |> 
  kbl() |> 
  kable_classic()
```

```{r}
layerName <- t1$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
keep_cols <- c("sqkm", "boundary", "admin_level", "population")
t0 <- t1 |> 
  clean_osmdata(
    drop_geom = FALSE,
    drop_id = TRUE,
    double_clean = TRUE,
    keep_na_rows = FALSE,
    keep_cols = keep_cols)
```

```{r}
t0 |> 
  st_drop_geometry() |> 
  count(.data[[layerName]], layer) |> 
  add_count(.data[[layerName]], wt = n, name = "TotalCount") |> 
  pivot_wider(
    names_from = layer,
    values_from = n) |> 
  arrange(desc(TotalCount)) |> 
  rename_with(~str_replace(.x, "osm_", ""), .cols = starts_with("osm_")) |> 
  rename_with(str_to_title) |> 
  kbl() |> 
  kable_classic()
```

### Railway

```{r}
t1 <- osm_data |> 
  chuck("Railway")
summarise_osm(t1) |> 
  kbl() |> 
  kable_classic()
```

```{r}
layerName <- t1$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
keep_cols <- c("layer", "usage", "type", "electrified", "gauge",
               "train", "maxspeed", "source", "designation")
t0 <- t1 |> 
  clean_osmdata(
    drop_geom = FALSE,
    drop_id = TRUE,
    double_clean = TRUE,
    keep_na_rows = FALSE,
    keep_cols = keep_cols) |> 
  st_transform(global_conf$crs$utm36)
```

```{r}
t0 |> 
  st_drop_geometry() |> 
  count(.data[[layerName]], layer) |> 
  add_count(.data[[layerName]], wt = n, name = "TotalCount") |> 
  pivot_wider(
    names_from = layer,
    values_from = n) |> 
  arrange(desc(TotalCount)) |> 
  rename_with(~str_replace(.x, "osm_", ""), .cols = starts_with("osm_")) |> 
  rename_with(str_to_title) |> 
  kbl() |> 
  kable_classic()
```

```{r}
t0 |> 
  filter(layer == "osm_lines",
         usage == "main",
         railway == "rail",
         gauge == 1435) |> 
  filter(st_intersects(geometry, egypt, sparse = F)) |> 
  tm_shape() +
  tm_lines("electrified", lwd = 3, legend.col.show = F)
```

```{r}
interest_list <- c(interest_list, "interest_railway") |> 
  unique()
interest_railway <- t0 |> 
  filter(layer == "osm_lines",
         usage == "main",
         railway == "rail",
         gauge == 1435) |> 
  filter(st_intersects(geometry, egypt, sparse = F)) |> 
  filter(is.na(name)) |> 
  summarise(geometry = st_union(geometry)) |> 
  mutate(Name = "Railway", NameEN = "Railway")
```

### Amenity

```{r}
t1 <- osm_data |> 
  chuck("Amenity")
summarise_osm(t1) |> 
  kbl() |> 
  kable_classic()
```

```{r}
layerName <- t1$overpass_call |> 
    str_extract("(?<=node).*(?=\\])") |>
    str_extract('(?<=").*?(?=")')
keep_cols <- c("layer", "usage", "type", "electrified", "gauge",
               "train", "maxspeed", "source", "designation")
t0 <- t1 |> 
  clean_osmdata(
    drop_geom = FALSE,
    drop_id = TRUE,
    double_clean = TRUE,
    keep_na_rows = FALSE,
    keep_cols = keep_cols)
```

```{r}
t0 |> 
  st_drop_geometry() |> 
  count(.data[[layerName]], layer) |> 
  add_count(.data[[layerName]], wt = n, name = "TotalCount") |> 
  pivot_wider(
    names_from = layer,
    values_from = n) |> 
  arrange(desc(TotalCount)) |> 
  rename_with(~str_replace(.x, "osm_", ""), .cols = starts_with("osm_")) |> 
  rename_with(str_to_title) |> 
  kbl() |> 
  kable_classic()
```

```{r}
t0 |> 
  filter(layer == "osm_lines",
         usage == "main",
         railway == "rail") |> 
  tm_shape() +
  tm_lines("maxspeed", lwd = 3)
```

### Old Code

```{r}
#| eval: false
osm_amenity <- opq(egypt_box) |>
  add_osm_feature(key = "amenity") |> #, value = "administrative") |> 
  osmdata_sf()
```

```{r}
#| eval: false
summarise_osm(osm_amenity)
```

```{r}
#| eval: false
df_amenity <- osm_amenity[grep("osm_", names(osm_amenity), value = TRUE)] |>
  bind_rows(.id = "Layer") |> 
  st_drop_geometry()
  # map("osm_lines")
  # map(list("osm_lines", "osm_polygons"))
  # chuck(c("osm_lines", "osm_points"))
df_amenity |> count(amenity, sort = TRUE)
```

```{r}
#| eval: false
osm_amenity |> 
  chuck("osm_points") |> 
  st_sample(size = 1e3) |> 
  tm_shape() +
  tm_dots(id = "name")
```

```{r}
#| eval: false
osm_amenity |> 
  chuck("osm_points") |> 
  st_drop_geometry() |> 
  View()
```

Check NA or constant columns

```{r}
#| eval: false
na_cols(osm_amenity$osm_points, thr = 0.01) |> length()
```

### What I want to Explore

```{r}
#| eval: false
osm_waterway <- opq(egypt_box) |>
 add_osm_features(
   features = c('"waterway"="river"',
                '"waterway"="canal"',
                '"waterway"="stream"',
                '"waterway"="drain"')) |> 
  osmdata_sf()
```

## Play Here

### Important Note

The `osm_poly2line()` function converts all `$osm_polygons` items of an `osmdata` object to `$osm_lines`. These objects remain polygonal in form, through sharing identical start and end points, but can then be treated as simple lines. This is important for polygonal highways, which are automatically classified as `$osm_polygons` simply because they form closed loops. The function enables all highways to be grouped together (as `$osm_lines`) regardless of the form.

In cleaning

1.  st_transform
2.  remove na cols
3.  keep only layers of interest

## Save to Pin

```{r}
interests <- bind_rows(interest_coastline, interest_railway, interest_roads)
pin_write(board, interests, name = "osmInterests", description = "OSM features of interest.")
```
