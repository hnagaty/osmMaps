---
title: "OSM API"
format: html
editor: visual
---

```{r}
#| echo: false
#| warning: false
#| message: false
library(sf)
library(units)
library(tidyverse)
library(kableExtra)
library(tmap)
library(osmdata)
```

```{r}
#| label: globalsInit
#| echo: false
global_conf <- yaml::read_yaml("D:/DataAnalytics/~Configs/globalConf.yaml")
```

```{r}
#| label: pins
library(pins)
pin_folder <- "D:/DataAnalytics/~Pins"
board <- board_folder(pin_folder, versioned = TRUE)

# load pin if it exists
if (pin_exists(board, "osmRoads")) {
  t1 <- pin_read(board, "osmRoads")
}
```

## Overpass API

I try to download Egypt OSM maps via the overpass API. The [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API)is a read only API provided by OSM to download selected data. It has an playground [here](https://overpass-turbo.eu/).

This [link](https://wiki.openstreetmap.org/wiki/Map_features) is useful for describing the map features and tags.

I use the R package [`osmdata`](https://docs.ropensci.org/osmdata/) for this. The package is designed to allow access to small-to-medium-sized OSM datasets. See [`osmextract`](https://github.com/ropensci/osmextract) for an approach for reading-in bulk OSM data extracts.

```{r}
#| label: initProxy
#| echo: false
init_proxy <- function() {
  proxy <- global_conf$httpProxy
  proxy$password <- rstudioapi::askForPassword(prompt = "Proxy Password")
  proxy_str <- paste0(
    proxy$username, ":",
    proxy$password, "@",
    proxy$server, ":",
    proxy$port
  )
  Sys.setenv(http_proxy = proxy_str)
  Sys.setenv(https_proxy = proxy_str)
}
init_proxy()
```

```{r}
library(osmdata)
```

#### Get Bounding Box

```{r}
#| echo: false
#| eval: false
getbb("cairo egypt", format_out = "sf_polygon") %>% plot()
```

#### Available features

Egypt boundaries

*Got this from [here](https://gist.github.com/graydon/11198540)*

```{r}
egypt_box <- c(24.70007, 22.0, 36.86623, 31.58568)  
  # matrix(ncol = 2)
```

List available features in the Overpass API

```{r}
#| eval: false
available_features() |> 
  kbl()
```

I have `r length(available_features())` features. The most interesting here are highways and amenities.

### Highways

The highways of interest are (as described [here](https://wiki.openstreetmap.org/wiki/Map_features#Highway)):

1.  **Motorway**: A restricted access major divided highway, normally with 2 or more running lanes plus emergency hard shoulder. Equivalent to the Freeway, Autobahn, etc..
2.  **Trunk**: The most important roads in a country's system that aren't motorways. (Need not necessarily be a divided highway).
3.  **Primary**: The next most important roads in a country's system. (Often link larger towns.)

```{r}
#| label: readOSM
if (!exists("t1")) {
  t1 <- opq(egypt_box) |>
    add_osm_features(features = c("\"highway\"=\"motorway\"",
                                  "\"highway\"=\"trunk\"",
                                  "\"highway\"=\"primary\"")) |> 
    osmdata_sf()}
roads <- t1 |> 
  chuck("osm_lines") |> 
  st_transform(crs = 32636)
```

*This takes sometime, and downloads large data. It's because the primary roads are so huge.*

```{}
```

```{r}
#| label: savePin
#| eval: false
pin_write(board, t1, name = "osmRoads", type = "rds",
          title = "Egypt OSM Roads", 
          description = "I downloaded highways for the tags: motorway, trunk & primary.")
```

```{r}
roads |> 
  ggplot() +
  geom_sf(aes(color = highway, size = highway)) +
  scale_colour_manual(values = c("red", "orange", "brown", "blue")) +
  scale_size_manual(values = c(1.5, 0.5, 0.5, 0.8)) +
  ggtitle("Egypt Roads")
```

#### Motorways

```{r}
roads |> 
  filter(highway == "motorway") |> 
  mutate(Length = st_length(geometry)/2) |> 
  st_drop_geometry() |> 
  group_by(name.en) |> 
  summarize(Length = set_units(sum(Length), "km")) |> 
  arrange(desc(Length)) |> 
  rename("Road Name" = name.en, "Length in Km" = Length) |> 
  kbl(digits = 2) |> 
  kable_styling(bootstrap_options = c("hover")) |> 
  row_spec(0, bold = T, font_size = 16, align = "center") |> 
  column_spec(1, bold = T, border_right = T, width = "10cm") 
```

#### The Ring Road

Plot a single road name

```{r}
roads |> 
  mutate(Interest = if_else(name.en == "The Ring Road" & highway == "motorway", "Yes", "No", missing = "No")) |> 
  ggplot() +
  geom_sf(aes(color = Interest, size = Interest)) +
  scale_colour_manual(values = c("Yes" = "red", "No" = "orange")) +
  scale_size_manual(values =  c("Yes" = 1.4, "No" = 0.2)) +
  ggtitle("The Ring Road") +
  coord_sf(crs = 4326, xlim = c(31, 31.5), ylim = c(29.9, 30.2))
```

To identify Cairo ring road, I filter by `highway = "motorway"` and `name.en = "The Ring Road"`.

Plot an interactive map

```{r}
tmap_mode("view")
tm_shape(roads) +
  tm_lines(lwd = 2, col = "red")
```

Roads should be snapped to themselves, to remove the double-way lines and keep only a single line.

```{r}
ring <- roads |> 
  filter(name.en == "The Ring Road" & highway == "motorway")
st_length(st_union(ring))
```

```{r}
tmap_mode("view")
tm_shape(ring) +
  tm_lines(lwd = 2, col = "red")
```

```{r}
ring2 <- ring |> 
  st_union() |> 
  st_snap(st_union(ring), tolerance = 30) |> 
  st_simplify()

st_length(st_union(ring2))

tm_shape(ring2) +
  tm_lines(lwd = 2, col = "red")
```

```{r}

```

I can't remove the duplicate with a snap.

### Amenities

Now, let's explore the amenities

```{r}
#| label: readAmenities
if (!exists("t2")) {
  t2 <- opq(egypt_box) |>
    add_osm_feature(key = "amenities") |> 
    osmdata_sf()}
```

```{r}
#| label: deinitProxy
#| echo: false
Sys.setenv(http_proxy = "")
Sys.setenv(https_proxy = "")
```
